CREATE TABLE MEMBER (
    ID      VARCHAR(20),
    NAME    VARCHAR(20),
    REGNO   VARCHAR(13),
    HP      VARCHAR(13),
    ADDRESS VARCHAR(100)
);

DROP TABLE MEMBER;

ALTER TABLE MEMBER ADD CONSTRAINT ID_PK PRIMARY KEY ( ID );

ALTER TABLE MEMBER MODIFY
    NAME
        CONSTRAINT NAME_NN NOT NULL;

ALTER TABLE MEMBER MODIFY
    REGNO
        CONSTRAINT REGNO_NN NOT NULL;

ALTER TABLE MEMBER MODIFY
    REGNO
        CONSTRAINT REGNO_UQ UNIQUE;

ALTER TABLE MEMBER MODIFY
    HP
        CONSTRAINT HP_UQ UNIQUE;

ALTER TABLE MEMBER MODIFY
    HP
        CONSTRAINT HP_NN NULL;

CREATE TABLE BOOK (
    CODE    NUMBER(4),
    TITLE   VARCHAR(50),
    COUNT   NUMBER(6),
    PRICE   NUMBER(10),
    PUBLISH VARCHAR(50)
);

ALTER TABLE BOOK ADD CONSTRAINT CODE_PK PRIMARY KEY ( CODE );

ALTER TABLE BOOK MODIFY
    TITLE
        CONSTRAINT TITLE_NN NOT NULL;

CREATE TABLE ORDER2 (
    NO      VARCHAR(10),
    ID      VARCHAR(20),
    CODE    NUMBER(4),
    COUNT   NUMBER(6),
    DR_DATE DATE
);

ALTER TABLE ORDER2 ADD CONSTRAINT NO_PK PRIMARY KEY ( NO );

ALTER TABLE ORDER2
    ADD CONSTRAINT ID_FK FOREIGN KEY ( ID )
        REFERENCES MEMBER ( ID );

ALTER TABLE ORDER2
    ADD CONSTRAINT CODE_FK FOREIGN KEY ( CODE )
        REFERENCES BOOK ( CODE );

ALTER TABLE ORDER2 MODIFY
    ID
        CONSTRAINT ID_NN NOT NULL;

ALTER TABLE ORDER2 MODIFY
    CODE
        CONSTRAINT CODE_NN NOT NULL;

ALTER TABLE ORDER2 MODIFY
    COUNT
        CONSTRAINT COUNT_NN NOT NULL;

ALTER TABLE ORDER2 MODIFY
    DR_DATE
        CONSTRAINT DR_DATE_NN NOT NULL;

CREATE TABLE DEPT_CONST (
    DEPTNO NUMBER(2),
    DNAME  VARCHAR(14),
    LOC    VARCHAR(13)
);

DROP TABLE DEPT_CONST;

ALTER TABLE DEPT_CONST ADD CONSTRAINT DEPTCONST_DEPTNO_PK PRIMARY KEY ( DEPTNO );

ALTER TABLE DEPT_CONST MODIFY
    DNAME
        CONSTRAINT DEPTCONST_DNAME_UNQ UNIQUE;

ALTER TABLE DEPT_CONST MODIFY
    LOC
        CONSTRAINT DEPTCONST_LOC_NN NOT NULL;

CREATE TABLE EMP_CONST (
    EMPNO    NUMBER(4),
    ENAME    VARCHAR(10),
    JOB      VARCHAR(9),
    TEL      VARCHAR(20),
    HIREDATE DATE,
    SAL      NUMBER(7),
    COMM     NUMBER(7),
    DEPTNO   NUMBER(2)
);

ALTER TABLE EMP_CONST ADD CONSTRAINT EMPCONST_EMPNO_PK PRIMARY KEY ( EMPNO );

ALTER TABLE EMP_CONST MODIFY
    ENAME
        CONSTRAINT EMPCONST_ENAME_NN NOT NULL;

ALTER TABLE EMP_CONST MODIFY
    TEL
        CONSTRAINT EMPCONST_TEL_UNQ UNIQUE;

ALTER TABLE EMP_CONST
    ADD CONSTRAINT EMPCONST_SAL_CHK CHECK ( SAL >= 1000
                                            AND SAL <= 9999 );

ALTER TABLE EMP_CONST
    ADD CONSTRAINT EMPCONST_DEPTNO_FK FOREIGN KEY ( DEPTNO )
        REFERENCES DEPT_CONST ( DEPTNO );

-- '송강' 교수가 강의하는 과목을 검색하라.        
SELECT
    C.PNO,
    C.CNAME,
    P.PNAME
FROM
    PROFESSOR P,
    COURSE    C
WHERE
        P.PNAME = '송강'
    AND P.PNO = C.PNO;
        
-- 학점이 2학점인 과목과 이를 강의하는 교수를 검색하라.
SELECT
    C.ST_NUM,
    C.CNAME,
    P.PNAME
FROM
    PROFESSOR P,
    COURSE    C
WHERE
        ST_NUM = 2
    AND C.PNO = P.PNO;

-- 화학과 1학년 학생의 기말고사 성적을 검색하라.
SELECT
    ST.SNAME,
    AVG(SC.RESULT)
FROM
    STUDENT ST,
    SCORE   SC
WHERE
        ST.MAJOR = '화학'
    AND ST.SYEAR = 1
    AND ST.SNO = SC.SNO
GROUP BY
    ST.SNAME;
-- 화학과 1학년 학생이 수강하는 과목을 검색하라.
SELECT
    MAJOR,
    SYEAR,
    SNAME,
    CNAME
FROM
    STUDENT ST,
    SCORE   SC,
    COURSE  C
WHERE
        ST.SNO = SC.SNO
    AND ST.MAJOR = '화학'
    AND ST.SYEAR = 1
    AND SC.CNO = C.CNO;
    
-- 학생 중에 동명이인을 검색하라.(self join)
SELECT DISTINCT
    S1.SNO,
    S1.SNAME
FROM
    STUDENT S1,
    STUDENT S2
WHERE
        S1.SNAME = S2.SNAME
    AND S1.SNO != S2.SNO;
    
-- 등록된 과목에 대한 모든 교수를 검색하라.
-- 등록하지 않은 교수도 출력
SELECT
    *
FROM
    PROFESSOR; -- 36 row
-- oracle join
SELECT
    *
FROM
    PROFESSOR P,
    COURSE    C
WHERE
    P.PNO = C.PNO (+);
-- Ansi
SELECT
    *
FROM
    PROFESSOR P
    LEFT OUTER JOIN COURSE    C ON P.PNO = C.PNO;
    
-- FULL JOIN
select * from professor p full join course c on p.pno = c.pno;

select s.sno, s.sname, score.result, course.cname, grade 
from student s, score, scgrade, course
where s.sno = score.sno 
and score.cno = course.cno
and score.result BETWEEN loscore and hiscore
order by s.sname, grade;

select * from student;
select * from scgrade;